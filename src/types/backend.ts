
// Types for Adversary Emulation
export interface EmulationRequest {
  techniques: string[];  // MITRE ATT&CK technique IDs
  schedule?: {
    timestamp?: string;  // ISO timestamp for scheduled execution
    recurring?: {
      frequency: 'once' | 'daily' | 'weekly' | 'monthly';
      daysOfWeek?: number[];  // 0 = Sunday, 6 = Saturday
    }
  };
  environment?: {
    target: string;
    osType: 'windows' | 'linux' | 'macos';
  };
}

export interface EmulationResult {
  id: string;
  status: 'success' | 'failure' | 'pending' | 'in-progress';
  techniques: string[];
  timestamp: string;
  logs: EmulationLog[];
  telemetry?: Record<string, any>;
}

export interface EmulationLog {
  techniqueId: string;
  timestamp: string;
  status: 'success' | 'failure';
  message: string;
  details?: Record<string, any>;
}

// Types for Sigma Rules
export interface SigmaRule {
  id: string;
  title: string;
  description: string;
  status: 'active' | 'draft' | 'deprecated';
  author: string;
  techniqueId: string;  // MITRE ATT&CK technique ID
  rule: string;  // Actual Sigma rule in YAML format
  dateCreated: string;
  dateUpdated: string;
  deployedTo: string[];  // List of SIEM platform IDs
  severity: 'low' | 'medium' | 'high' | 'critical';
  source: string;  // Log source
  isDuplicate: boolean;
  duplicateOf?: string;  // ID of the original rule if this is a duplicate
  aiGenerated?: boolean; // Whether the rule was generated by AI
  aiConfidence?: number; // AI confidence score if generated by AI
}

// Types for SIEM Integration
export interface SiemPlatform {
  id: string;
  name: string;
  description: string;
  connected: boolean;
  lastSync: string | null;
  rulesDeployed: number;
  status: 'healthy' | 'warning' | 'error' | 'disconnected';
  credentials?: {
    apiKey?: string;
    url?: string;
    username?: string;
  };
}

export interface DeployRequest {
  ruleIds: string[];
  platformId: string;
}

export interface DeployResult {
  success: boolean;
  platformId: string;
  deployedRules: {
    ruleId: string;
    status: 'success' | 'failure';
    message?: string;
  }[];
  timestamp: string;
}

// Types for Scheduling
export interface Schedule {
  id: string;
  name: string;
  description?: string;
  emulation: EmulationRequest;
  status: 'active' | 'paused' | 'completed';
  lastRun?: string;
  nextRun?: string;
  createdAt: string;
  updatedAt: string;
  userId: string;
  aiScheduled?: boolean; // Whether AI helped schedule this emulation
  aiReasoning?: string; // AI's reasoning for the schedule
}

// New AI-related types
export interface AiRuleGeneration {
  emulationId: string;
  timestamp: string;
  confidence: number;
  generatedRules: string[]; // Array of generated rule IDs
  suggestedImprovements: string[];
}

export interface AiAnomaly {
  id: string;
  emulationId: string;
  techniqueId: string;
  description: string;
  confidence: number;
  severity: 'low' | 'medium' | 'high' | 'critical';
  timestamp: string;
  status: 'new' | 'investigating' | 'resolved' | 'false-positive';
  assignedTo?: string;
}

export interface AiPrediction {
  id: string;
  type: 'schedule' | 'resource' | 'threat';
  timestamp: string;
  prediction: string;
  confidence: number;
  reasoning: string;
  outcome?: 'correct' | 'incorrect';
  actualValue?: string;
}

export interface AiFeedback {
  id: string;
  entityType: 'rule' | 'anomaly' | 'schedule';
  entityId: string;
  feedback: 'positive' | 'negative';
  details: string;
  userId: string;
  timestamp: string;
}

// Database tables/collections
export type Tables = {
  emulation_results: EmulationResult;
  sigma_rules: SigmaRule;
  siem_platforms: SiemPlatform;
  deploy_results: DeployResult;
  schedules: Schedule;
  tenants: {
    id: string;
    name: string;
    description?: string;
    createdAt: string;
  };
  users_tenants: {
    userId: string;
    tenantId: string;
    role: 'admin' | 'analyst' | 'viewer';
  };
  ai_rule_generations: AiRuleGeneration;
  ai_anomalies: AiAnomaly;
  ai_predictions: AiPrediction;
  ai_feedback: AiFeedback;
};
