
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { toast } from "@/components/ui/use-toast";
import { FileCode2, Eye, Cloud } from "lucide-react";
import { SigmaRuleListItem } from "./RuleList";
import { getSeverityColor } from "@/utils/siemUtils";

interface Vulnerability {
  id: string;
  name: string;
  description: string;
  severity: string;
  emulation: string;
  tactic: string;
  technique: string;
  hasRule: boolean;
  ruleId?: string;
}

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
  rules: SigmaRuleListItem[];
  onSelectRule: (rule: SigmaRuleListItem) => void;
  setActiveTab: (tab: string) => void;
  onDeployRule: (rule: SigmaRuleListItem) => void;
}

const VulnerabilityList = ({ 
  vulnerabilities,
  rules,
  onSelectRule,
  setActiveTab,
  onDeployRule
}: VulnerabilityListProps) => {
  
  const handleGenerateRule = (vulnerabilityId: string) => {
    const vulnerability = vulnerabilities.find(v => v.id === vulnerabilityId);
    
    if (!vulnerability) return;
    
    const isRedundant = checkRuleRedundancy(
      vulnerability.name, 
      vulnerability.description,
      rules
    );
    
    if (isRedundant) {
      toast({
        title: "Rule Already Exists",
        description: "A similar rule already exists in the repository. Avoid creating duplicates.",
        variant: "destructive",
      });
      return;
    }
    
    toast({
      title: "Rule Generation Started",
      description: "Generating sigma rule from vulnerability data",
    });
    
    setTimeout(() => {
      toast({
        title: "Rule Generated",
        description: "New sigma rule has been created and added to the repository",
      });
    }, 2000);
  };
  
  return (
    <div className="space-y-4">
      {vulnerabilities.map((vuln) => (
        <div 
          key={vuln.id} 
          className="p-4 border border-cyber-primary/20 rounded-md"
        >
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-medium">{vuln.name}</h3>
              <div className="flex items-center gap-2 mt-1">
                <Badge 
                  variant="outline" 
                  className="bg-cyber-primary/10 border-cyber-primary"
                >
                  {vuln.technique}
                </Badge>
                <Badge 
                  variant="outline" 
                  className="bg-cyber-accent/10 border-cyber-accent"
                >
                  {vuln.tactic}
                </Badge>
                <Badge 
                  className={getSeverityColor(vuln.severity.toLowerCase())}
                >
                  {vuln.severity}
                </Badge>
              </div>
              <p className="text-sm text-gray-400 mt-2">{vuln.description}</p>
            </div>
            
            {vuln.hasRule ? (
              <div className="flex space-x-2">
                <Button 
                  variant="outline" 
                  className="border-cyber-success text-cyber-success hover:bg-cyber-success/10"
                  onClick={() => {
                    const rule = rules.find(r => r.id === vuln.ruleId);
                    if (rule) {
                      onSelectRule(rule);
                      setActiveTab("rules");
                    }
                  }}
                >
                  <Eye className="h-4 w-4 mr-2" /> View Rule
                </Button>
                
                <Button 
                  variant="default"
                  onClick={() => {
                    const rule = rules.find(r => r.id === vuln.ruleId);
                    if (rule) {
                      onDeployRule(rule);
                    }
                  }}
                  className="bg-cyber-primary hover:bg-cyber-primary/90"
                >
                  <Cloud className="h-4 w-4 mr-2" /> Deploy Rule
                </Button>
              </div>
            ) : (
              <Button 
                onClick={() => handleGenerateRule(vuln.id)}
                className="bg-cyber-primary hover:bg-cyber-primary/90"
              >
                <FileCode2 className="h-4 w-4 mr-2" /> Generate Rule
              </Button>
            )}
          </div>
          
          <div className="mt-2 text-xs text-gray-500">
            Found in emulation: <span className="text-gray-400">{vuln.emulation}</span>
          </div>
        </div>
      ))}
    </div>
  );
};

// Helper function to check for rule redundancy
const checkRuleRedundancy = (
  ruleName: string, 
  ruleDescription: string, 
  existingRules: SigmaRuleListItem[]
) => {
  return existingRules.some(
    rule => 
      rule.title.toLowerCase() === ruleName.toLowerCase() ||
      rule.description.toLowerCase() === ruleDescription.toLowerCase()
  );
};

export default VulnerabilityList;
